//////////////////////////////////////////////////////////////////////////
// Copyright (c) 2013,深圳市文鼎创数据安全有限公司
// All rights reserved.
// 
// 文件名称：
//		MidwareConfig.h
//
// 文件标识：
//
// 摘   要：
//		为中间件及管理工具等各模块提供配置读取与设置接口。
// 
// 当前版本：
//		1.0
//
// 作   者：
//		伍友良
//
// 完成日期：
//		2013年06月06日
//////////////////////////////////////////////////////////////////////////

#ifndef _MIDWARE_CONFIG_H_
#define _MIDWARE_CONFIG_H_
#include <assert.h>
#include <EsTypeDef.h>
#include <EsCommon/EsCommon.h>
#include <EsCommon/EsCommonLog.h>
#include <EsError.h>
#include "MidwareConfigDef.h"

#ifdef __cplusplus
extern "C"
{
#endif
	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		加载配置，只在初始化时加载，在其他时机随意加载是不合规矩的做法。
	//	函数参数：
	//		[in]pszFilePath:		BIN文件路径。
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgLoadConfig(IN const char* pszFilePath);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		释放配置
	//	函数参数：
	//		无
	// 返回值:
	//		见错误码定义
	u4 CALL_TYPE CfgUnloadConfig(void);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		释放配置
	//	函数参数：
	//		[in]pszFilePath:		BIN文件路径
	//			pu1CfgData			配置数据，可以为NULL
	//          pu4CfgDataLen       配置数据的长度
	//		无
	// 返回值:
	//		见错误码定义
	u4 CALL_TYPE CfgReadConfig(IN const char* pszFilePath, IN u1* pu1CfgData, IN OUT u4* pu4CfgDataLen);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		设置配置语言，只在初始化时设置，或者中间件语言切换时才调用此函数。
	//		在配置语言设置之后，再调用CfgGetXConfig函数时，输出参数的文本信息就与设置的语言对应。
	//		若配置语言没有设置，则返回相应的错误，而不是按照默认语言进行处理。
	//	函数参数：
	//		[in]enLangId:		语言ID
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgSetLang(IN EN_LANG_ID enLangId);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取配置语言
	//	函数参数：
	//		[out]penLangId:		语言ID
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetLang(OUT EN_LANG_ID* penLangId);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取字符串的值
	//	函数参数：
	//		[in]u4StringId:		字符串ID
	//		[out]pszValue:		字符串值
	//		[in|out]pu4Len:		作为输入表示缓冲区大小，作为输出表示字符串实际字符数目
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetString(IN const char* pszStringName, OUT char* pszValue, IN OUT u4* pu4Len);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取CSP配置
	//	函数参数：
	//		[out]pblkCspConfig:		CSP配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetCspConfig(OUT BlkCspConfig* pblkCspConfig);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取SlotApi配置
	//	函数参数：
	//		[out]pblkSlotApiConfig:		SlotApi配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetSlotApiConfig(OUT BlkSlotApiConfig* pblkSlotApiConfig);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取Token配置
	//	函数参数：
	//		[out]pblkTokenConfig:		Token配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetTokenConfig(OUT BlkTokenConfig* pblkTokenConfig);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取Driver配置
	//	函数参数：
	//		[out]pblkDriverConfig:		Driver配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetDriverConfig(OUT BlkDriverConfig* pblkDriverConfig);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取UI配置。UI指的是中间件的交互界面，不包括管理工具界面
	//	函数参数：
	//		[out]pblkUiConfig:		UI配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetUiConfig(OUT BlkUiConfig* pblkUiConfig);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获取管理工具配置。配置内容有界面的布局，流程细节的处理等。
	//	函数参数：
	//		[out]pblkManToolConfig:		管理工具配置详情
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.05
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgGetManToolConfig(OUT BlkManToolConfig* pblkManToolConfig);


	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		释放内存
	//	函数参数：
	//		[out]pvData:		输出结构体中最后一个成员变量
	//
	// 返回值:
	//		见错误码定义
	//
	// 日期:    
	//		2013.07.13
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE CfgFreeData(void* pvData);

#ifdef __cplusplus
}
#endif


#endif