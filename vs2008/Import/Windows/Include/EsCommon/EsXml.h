//////////////////////////////////////////////////////////////////////////
// Copyright (c) 2013,深圳市文鼎创数据安全有限公司
// All rights reserved.
// 
// 文件名称：
//		EsXml.h
//
// 文件标识：
//
// 摘   要：
//		XML文件解析接口。本接口只提供最朴素的解析函数，不提供类型转换、宏展开等高级功能。
//		定义本接口的意义在于，对XML解析功能进行了一层抽象，从而使得使用者无需关心本层接口的具体实现方式。
//		具体实现方式可以有如下方式：使用第三方库，使用平台SDK、自主编码等。
//		我们的选择是使用第三方开源库。
//		注意：
//		1）本接口所提供的函数并不对字符编码进行转换处理。
//		2）本接口的某些函数的输出参数是二级字符串指针，但调用者不需要对其指向的内存进行释放操作，
//		最终在“EsXmlFree”被调用之后，所有相关的内存都将合理释放。
// 
// 当前版本：
//		1.0
//
// 作   者：
//		伍友良
//
// 完成日期：
//		2013年06月28日
//////////////////////////////////////////////////////////////////////////

#ifndef _ES_XML_H
#define _ES_XML_H
#include "./EsTypeDef.h"
#include "./EsError.h"

#ifdef __cplusplus
extern "C"
{
#endif
	typedef struct BlkXmlAttributeTag
	{
		const char* m_pszName;
		const char* m_pszValue;
	}BlkXmlAttribute;
	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		从文件中加载XML。
	//
	//	函数参数：
	//		[in]pszXmlDoc:			XML文件路径。
	//		[out]phXmlNode:			XML对象的句柄
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlLoadFromFile(IN const char* pszXmlDoc, OUT ESHANDLE* phXmlNode);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		从内存中加载XML。
	//
	//	函数参数：
	//		[in]pu1Data:				内存数据。
	//		[out]u4Len:					数据长度
	//		[out]phXmlNode:				XML对象的句柄
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlLoadFromMemory(IN const u1* pu1Data, IN u4 u4Len, OUT ESHANDLE* phXmlNode);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得XML对象的字符集编码。
	//
	//	函数参数：
	//		[in]hXmlNode:				XML对象的句柄。
	//		[out]penCharSet:			指针，指向具体的字符集（对应相应的编码）
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetEncoding(IN ESHANDLE hXmlNode, EnCharSet* penCharSet);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		回收资源。在调用“EsXmlLoadFromFile”、“EsXmlLoadFromMemory”成功之后，如果XML数据已经无需再使用，
	//		必须调用此接口释放相应的内存。
	//
	//	函数参数：
	//		[in]hXmlNode:					XML对象的句柄
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlFree(const ESHANDLE hXmlNode);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得指定名称的子节点，若有多个同名节点，仅返回第一个节点。
	//
	//	函数参数：
	//		[in]hXmlNode:					XML对象的句柄
	//		[out]pszChildName:				子节点的名称
	//		[out]phXmlChildNode:			子节点的句柄指针，指向获取到的子节点的句柄
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetSingleChild(IN ESHANDLE hXmlNode, IN const char* pszChildName, OUT ESHANDLE* phXmlChildNode);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得子节点列表。
	//
	//	函数参数：
	//		[in]hXmlNode:					XML对象的句柄
	//		[out]pphXmlNodeChildrenList:	子节点的列表，二级指针
	//		[in|out]pu4ChildrenNum:			子节点的数目
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetChildren(IN ESHANDLE hXmlNode, OUT ESHANDLE* phXmlNodeChildrenList, IN OUT u4* pu4ChildrenNum);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得节点的名称。
	//
	//	函数参数：
	//		[in]hXmlNode:				XML对象的句柄
	//		[out]ppszName:				节点的名称，二级指针，调用者无需释放对应内存，但是在调用ExXmlFree之后，不可再使用
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetClassName(IN ESHANDLE hXmlNode, OUT const char** ppszName);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得节点的文本。例如有这样的一个节点：“<nodeName>Node Text</nodeName>”，
	//		则对此节点调用“EsXmlGetText”，*ppszName指向的内存为字符串“Node Text”。
	//
	//	函数参数：
	//		[in]hXmlNode:				XML对象的句柄
	//		[out]ppszText:				节点的文本信息，二级指针，调用者无需释放对应内存，但是在调用ExXmlFree之后，不可再使用
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetText(IN ESHANDLE hXmlNode, OUT const char** ppszName);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得属性列表。
	//
	//	函数参数：
	//		[in]hXmlNode:					XML对象的句柄
	//		[out]pblkAttrList:				属性列表，无需释放相应内存，但是在调用ExXmlFree之后，不可再使用
	//		[in|out]pu4AttrCount:			属性的数目，作输入时，指示缓冲区的大小（以相应的结构体计），作输出时，表示属性的实际数目。
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetAttributes(IN ESHANDLE hXmlNode, OUT BlkXmlAttribute* pblkAttrList, IN OUT u4* pu4AttrCount);

	//////////////////////////////////////////////////////////////////////////
	//	函数说明:  
	//		获得属性值。
	//
	//	函数参数：
	//		[in]hXmlNode:				XML对象的句柄
	//		[in]pszName:				属性的名称
	//		[out]ppszValue:				属性的值，二级指针，无需释放相应的内存，但是在调用ExXmlFree之后，不可再使用
	//
	//
	// 返回值:
	//		见错误码定义
	//
	// 作者:
	//		伍友良
	// 日期:    
	//		2013.06.28
	//////////////////////////////////////////////////////////////////////////
	u4 CALL_TYPE EsXmlGetAttribute(IN ESHANDLE hXmlNode,IN const char* pszName, OUT const char** ppszValue);


    //////////////////////////////////////////////////////////////////////////
    //	函数说明:  
    //		设置xml解释时是否压缩空格，应该加载xml前设置
    //
    //	函数参数：
    //		[in]bCondense:				解析xml时是否压缩空格
    //
    //
    // 返回值:
    //		见错误码定义
    //
    // 作者:
    //		李映辉
    // 日期:    
    //		2014.09.13
    //////////////////////////////////////////////////////////////////////////
    u4 CALL_TYPE EsXmlSetCondenseWhiteSpace(ESBOOL bCondense);

    //////////////////////////////////////////////////////////////////////////
    //	函数说明:  
    //		获取xml解释时是否压缩空格
    //
    //	函数参数：
    //		[out]pbCondense:				解析xml时是否压缩空格
    //
    //
    // 返回值:
    //		见错误码定义
    //
    // 作者:
    //		李映辉
    // 日期:    
    //		2014.09.13
    //////////////////////////////////////////////////////////////////////////
    u4 CALL_TYPE EsXmlGetCondenseWhiteSpace(ESBOOL* pbCondense);


	// 以上全是“读”接口函数，还需要考虑“写”接口函数吧？

#ifdef __cplusplus
}
#endif


#endif